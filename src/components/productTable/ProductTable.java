/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package components.productTable;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.Product;
import services.ProductService;

/**
 *
 * @author vidur
 */
public class ProductTable extends javax.swing.JPanel {

    /**
     * Creates new form ProductTable
     */
    final ProductService productService;
    List<Product> products = new ArrayList<>();
    ProductTableInterface productTableInterface;
    public ProductTable() {
        productService = new ProductService();
        initComponents();
        initData();
    }
    
    public void setProductTableInterface(ProductTableInterface productTableInterface){
        this.productTableInterface = productTableInterface;
    }

    private void loadProductsToTable() {
        products.clear();
        try {
            products.addAll(productService.getAllProducts());
            DefaultTableModel tableModel = (DefaultTableModel) productTable.getModel();
            tableModel.setRowCount(0); // Clear existing rows

            for (Product product : products) {
                tableModel.addRow(new Object[]{
                    product.getId(),
                    product.getProductName(),
                    product.getProductPrintingName(),
                    product.getSubCategory().getSubCategory(),
                    product.getSubCategory().getCategory().getCategory(), // Assuming this method exists
                    product.getUnit().getUnit(),
                    product.getStockRefillingQty()
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }

    }

    private void initData() {
        loadProductsToTable();
    }
    public void refresh(){
        loadProductsToTable();
    }
    public void searchByProductName(String name){
        try{
            if(!name.isBlank()){
            products.clear();
            products.addAll(productService.searchProductsByName(name));
            DefaultTableModel tableModel = (DefaultTableModel) productTable.getModel();
            tableModel.setRowCount(0); // Clear existing rows

            for (Product product : products) {
                tableModel.addRow(new Object[]{
                    product.getId(),
                    product.getProductName(),
                    product.getProductPrintingName(),
                    product.getSubCategory().getSubCategory(),
                    product.getSubCategory().getCategory().getCategory(), // Assuming this method exists
                    product.getUnit().getUnit(),
                    product.getStockRefillingQty()
                });
            }
            
       }
            else{
                loadProductsToTable();
            }
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(this,ex.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Printing Name", "Sub Category", "Category", "unit", "Refilling QTY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(productTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        int selectedRow = productTable.getSelectedRow();
        if (selectedRow >= 0) {
            Product selectedProduct = products.get(selectedRow);
            if (productTableInterface != null) {
                productTableInterface.selectProduct(selectedProduct);
            }
        }
        
    }//GEN-LAST:event_productTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable productTable;
    // End of variables declaration//GEN-END:variables
}
